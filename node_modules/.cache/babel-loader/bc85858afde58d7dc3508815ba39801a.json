{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants'; //note: this is an alternative to containers that use constructors with this.state = {...}\n\nvar initialStateSearch = {\n  searchField: '' //note: reducer searchRobots is a pure function\n\n};\nexport var searchRobots = function searchRobots() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateSearch;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {\n        searchField: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\nvar initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n};\nexport var requestRobots = function requestRobots() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialStateRobots;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {\n        isPending: true\n      });\n\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/thedoctor/Desktop/Desktop Folders Files/Self Study/Junior to Senior Web Dev/Projects & Exercises/4 Performance 2/robofriends/src/reducers.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","searchRobots","state","action","type","Object","assign","payload","initialStateRobots","isPending","robots","error","requestRobots"],"mappings":"AAAA,SACEA,mBADF,EAEEC,sBAFF,EAGEC,sBAHF,EAIEC,qBAJF,QAKO,aALP,C,CAOA;;AACA,IAAMC,kBAAkB,GAAG;AACzBC,EAAAA,WAAW,EAAE,EADY,CAI3B;;AAJ2B,CAA3B;AAKA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAA6C;AAAA,MAA5CC,KAA4C,uEAApCH,kBAAoC;AAAA,MAAhBI,MAAgB,uEAAP,EAAO;;AACrE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKT,mBAAL;AACE,aAAOU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAACF,QAAAA,WAAW,EAAEG,MAAM,CAACI;AAArB,OAAzB,CAAP;;AACF;AACE,aAAOL,KAAP;AAJJ;AAMH,CAPM;AASP,IAAMM,kBAAkB,GAAG;AACzBC,EAAAA,SAAS,EAAE,KADc;AAEzBC,EAAAA,MAAM,EAAE,EAFiB;AAGzBC,EAAAA,KAAK,EAAE;AAHkB,CAA3B;AAMA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAA6C;AAAA,MAA5CV,KAA4C,uEAApCM,kBAAoC;AAAA,MAAhBL,MAAgB,uEAAP,EAAO;;AACxE,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKR,sBAAL;AACE,aAAOS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAACO,QAAAA,SAAS,EAAE;AAAZ,OAAzB,CAAP;;AAEF,SAAKZ,sBAAL;AACE,aAAOQ,MAAM,CAACC,MAAP,CACL,EADK,EAELJ,KAFK,EAGL;AACEQ,QAAAA,MAAM,EAAEP,MAAM,CAACI,OADjB;AAEEE,QAAAA,SAAS,EAAE;AAFb,OAHK,CAAP;;AASF,SAAKX,qBAAL;AACE,aAAOO,MAAM,CAACC,MAAP,CACL,EADK,EAELJ,KAFK,EAGL;AACES,QAAAA,KAAK,EAAER,MAAM,CAACI,OADhB;AAEEE,QAAAA,SAAS,EAAE;AAFb,OAHK,CAAP;;AASA;AACE,aAAOP,KAAP;AAzBN;AA2BD,CA5BM","sourcesContent":["import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants';\n\n//note: this is an alternative to containers that use constructors with this.state = {...}\nconst initialStateSearch = {\n  searchField: ''\n}\n\n//note: reducer searchRobots is a pure function\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch(action.type){\n      case CHANGE_SEARCH_FIELD:\n        return Object.assign({}, state, {searchField: action.payload});\n      default:\n        return state;\n    }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch(action.type){\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true});\n\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign(\n        {},\n        state,\n        {\n          robots: action.payload,\n          isPending: false\n        }\n      );\n\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign(\n        {},\n        state,\n        {\n          error: action.payload,\n          isPending: false\n        }\n      );\n\n      default:\n        return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}